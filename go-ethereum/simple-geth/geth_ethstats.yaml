services: # here, specify the type of service(s) you'd like to test -- in the context of this sample, we are testing Geth
  - name: geth # the name of the service you'd like to test
    description: this service runs the go-ethereum client
    image: "ethereum/client-go:alltools-latest" # specify an image and tag (if no tag is specified, defaults to 'latest')
    volumes:
      - path: /staticpeers/
        name: staticpeers
        scope: singleton
    script: # if a script is specified here, it will overrun the image's startup command
      inline: |
       cp /staticpeers/static-nodes.json /geth/geth/static-nodes.json;
       geth --nousb --datadir ./geth/ init /geth/genesis.json;
       geth --datadir ./geth/ $(uname -n | egrep "[0-9]+" -o)
       geth --datadir ./geth/ --rpc --nodiscover --rpcaddr 0.0.0.0 --miner.gasprice=1 --rpcapi "admin,web3,db,eth,net,personal,miner,txpool" --rpccorsdomain "0.0.0.0" --txpool.nolocals --rpcvhosts=* --port 30303 --networkid 555555 --nousb --etherbase 0 --unlock 0 --allow-insecure-unlock --password ./geth/pw.txt --mine --minerthreads=1 --ethstats $NAME:secret@splunk.whiteblock.io:9002
    input-files: # here, specify the files you'd like to include from the start
      - source-path: ./genesis.json # the source-path specified should be relative to the test definition file's location
        destination-path: /geth/genesis.json
      - source-path: ./keystore/pk1
        destination-path: /geth/keystore/pk
      - source-path: ./keystore/pw.txt
        destination-path: /geth/pw.txt
      - source-path: ./keystore/nodekey1
        destination-path: /geth/geth/nodekey
    resources: # specify the resources you'd like to allot to your service
      cpus: 8
      memory: 8 GB
      storage: 30 GiB

sidecars:
  - name: splunk
    sidecar-to:
      - geth
    image: gcr.io/whiteblock/splunk:latest
    resources: # specify the resources you'd like to allot to your service
      cpus: 2
      memory: 4 GB
      storage: 30 GiB
    script:
      inline:
        ethlogger --eth-rpc-url=http://$SERVICE:8545
    environment:
      NETWORK_NAME: whiteblock
      START_AT_BLOCK: latest
      SPLUNK_HEC_URL: "https://splunk.whiteblock.io:8088"
      SPLUNK_HEC_TOKEN: "f57efd39-f84d-470d-ae0e-ff0f67ee98c7"
      SPLUNK_EVENTS_INDEX: main
      SPLUNK_METRICS_INDEX: metrics
      SPLUNK_INTERNAL_INDEX: metrics
      SPLUNK_HEC_REJECT_INVALID_CERTS: "false"

task-runners:
  - name: wait
    script:
      inline: sleep 7200
  
  - name: geth-staticpeers-helper
    description: will gather the IP addresses and generate a static peers file.
    image: "gcr.io/whiteblock/helpers/besu/staticpeers:master"
    volumes:
      - path: /staticpeers/
        name: staticpeers
        scope: singleton
    script: # if a script is specified here, it will overrun the image's startup command
      inline: ./besuStaticPeers generate -a "$(cat /var/geth/accounts/accounts.json)" --network common-network --service geth-service  >> /staticpeers/static-nodes.json
    resources: # specify the resources you'd like to allot to your service
      cpus: 1
      memory: 2 GB
      storage: 5 GiB
  
  - name: account-gen
    image: gcr.io/whiteblock/helpers/eth/accgen
    volumes:
      - path: /var/geth/accounts
        name: accounts
        scope: singleton
    script:
      inline: ./ethAccGen generate 2 >> /var/geth/accounts/accounts.json

  - name: generate-pk
    image: imega/jq
    volumes:
      - path: /var/geth/accounts
        name: accounts
        scope: singleton
    volumes:
      - path: /var/geth/keys
        name: keys
        scope: singleton
    script:
      inline: |
      for $i in $(seq 1 $(cat /var/geth/accounts/accounts.json | jq length)); do
        cat /var/geth/accounts/accounts.json | jq ".[$i]" >> "/var/geth/keys/pk$i";
      done
tests:
  - name: geth_network_2_nodes # the name of the test
    description: first test - run two geth nodes on the common-network
    phases:
      - name: create
        tasks: 
        - type: geth-staticpeers-helper
      - name: start
        description: start the remaining node(s)
        system: 
        - name: geth1 # name the service instance
          type: geth1 # the type of service is the `name` of the service you specified in the services array
          count: 1 # the number of instances of this service you'd like to provision for this test
          port-mappings:
            - "8545:8545"
          resources: # here, you can modify the resources you've specified for your service before, and you can specify which network(s) you'd like your service to be connected to
            networks: # if a network is not specified, the service will connect to the network called "default"
              - name: common-network
        - name: geth2 # name the service instance
          type: geth2 # the type of service is the `name` of the service you specified in the services array
          count: 1 # the number of instances of this service you'd like to provision for this test
          port-mappings:
            - "8545:8545"
          resources: # here, you can modify the resources you've specified for your service before, and you can specify which network(s) you'd like your service to be connected to
            networks: # if a network is not specified, the service will connect to the network called "default"
              - name: common-network
      - name: wait
        tasks: 
        - type: wait
          timeout: 7200s
